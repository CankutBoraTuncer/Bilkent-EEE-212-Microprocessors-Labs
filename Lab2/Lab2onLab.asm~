ORG 0000H
; THE MAIN
;------------------------------------------------------------------------------------;
;VARIABLES
PIVOT EQU 30H
INDEX EQU 31H
LENGTH EQU 20H

MOV R0, #20D
MOV A, #'A'
ADD A, R0
MOV PIVOT,A 

MOV INDEX, #04H
MOV LENGTH, #05H

;-------------------------------;
DECYPHER:
;NORMALIZE THE WORD
MOV A,PIVOT
SUBB A,#41H
DEC A
MOV PIVOT,A 
CLR C
;-------------------------------;
;FIND THE INDEX AND GENERATE NEW ALPHABET
MOV DPTR,#ENCRYPT
MOV A, INDEX
MOVC A,@A+DPTR

SUBB A,#41H
CLR C
MOV DPTR, #ALPHABET
MOV R0, #33H
MOV R2, #26D

BACK:
PUSH ACC
MOVC A, @A+DPTR
MOV @R0, A
POP ACC
INC A 
INC R0
DJNZ R2,BACK
;-------------------------------;
;GENERATE NEW ALPHABET_REVERSE
MOV DPTR, #ALPHABET_REVERSE
MOV R0, #50H
MOV R2, #26D
MOV A, #1Ah
SUBB A, PIVOT
DEC A
DEC A

BACK2:
PUSH ACC
MOVC A, @A+DPTR
MOV @R0, A
POP ACC
INC A 
INC R0
DJNZ R2,BACK2
;-------------------------------;
;MATCH THE INDEX OF THE DECIPHERED WORD WITH ALPHABET_REVERSE
MOV R4, #70H
MOV DPTR,#ENCRYPT

START:
MOV R2,#26D
MOV R0, #33H
CLR A
PUSH ACC 
MOVC A, @A+DPTR
CJNE A, #0H, GO
SJMP EXIT

GO:
MOV R7,A
BACK3:
MOV A,@R0

CJNE A, 07H,HERE
POP ACC
PUSH 01H
MOV R0,04H
MOV @R0,ACC
POP 01H
INC R4
INC DPTR
SJMP START

HERE:
INC R0
POP ACC 
INC ACC
PUSH ACC
DJNZ R2,BACK3
;-------------------------------;
;MATCH THE INDEX OF THE DECIPHERED WORD WITH ALPHABET_REVERSE
EXIT:
MOV R3,#50H
MOV R1, #90H
MOV R0, #70H

BACK4:
MOV A, @R0
ADD A,R3 
PUSH 00H
MOV R0,A 
MOV A,@R0
MOV @R1,A 
POP 00H
INC R0
INC R1

DJNZ LENGTH, BACK4

ACALL CONFIGURE_LCD
MOV LENGTH, #05H
MOV R0, #90H
KEYBOARD_LOOP:
MOV A, @R0
ACALL SEND_DATA
INC R0
DJNZ LENGTH, KEYBOARD_LOOP
WAIT: SJMP WAIT 

CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY: ;A SHORT DELAY SUBROUTINE
push 0
push 1
mov r0,#50
DELAY_OUTER_LOOP:
mov r1,#255
djnz r1,$
djnz r0,DELAY_OUTER_LOOP
pop 1
pop 0
ret
;------------------------------------------------------------------------------------;
ORG 1000H
ALPHABET: DB 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQESTUWYZ'
ALPHABET_REVERSE: DB 'ZYXWVUTSRQPONMLKJIHGFEDCBAZYXWVUTSRQPONMLKJIHGFEDCBA'
ENCRYPT: DB 'TESTK'; PASSWORD
END


































